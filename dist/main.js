/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
eval("// tidy up code\r\n// consider adding firebase support\r\n\r\nfunction getTodaysDate() {\r\nconst field = document.querySelector('#addTodoDate');\r\nconst date = new Date();\r\n// Set the date\r\nfield.value = date.getFullYear().toString() + '-' + (date.getMonth() + 1).toString().padStart(2, 0) + \r\n    '-' + date.getDate().toString().padStart(2, 0);\r\n}\r\n\r\nfunction reformatDate(date) {\r\n  const year = date.slice(0, 4);\r\n  console.log(year);\r\n  const month = date.slice(5, 7);\r\n  console.log(month);\r\n  const day = date.slice(8, 10);\r\n  console.log(day);\r\n  const newDate = `${day}-${month}-${year}`;\r\n  console.log(newDate);\r\n  return newDate;\r\n}\r\n\r\n\r\n\r\nclass Todo {\r\n  constructor (title, project, description, dueDate) {\r\n    this.title = title;\r\n    this.project = project;\r\n    this.description = description;\r\n    this.dueDate = dueDate;\r\n    this.completed = false;\r\n  }\r\n  addTodoToProject() {\r\n    activeProject.todos.push(this);\r\n  }\r\n}\r\n\r\nclass Project {\r\n  constructor (title, todos = []) {\r\n    this.title = title;\r\n    this.todos = todos;\r\n  }\r\n\r\n  addProjectToList() {\r\n    projects.push(this);\r\n    displayProjects();\r\n  }\r\n\r\n\r\n\r\n  displayTodos() {\r\n    // MAKE THE CLICKED PROJECT THE ACTIVE PROJECT\r\n    // (for the benefit of the addTodo function - so it knows where to save new todo)\r\n    activeProject = this;\r\n    const projectTitleDisplay = document.getElementById(\"project-title\");\r\n    projectTitleDisplay.innerHTML = activeProject.title;\r\n\r\n    const todoList = document.getElementById(\"todo-list\");\r\n    todoList.innerHTML = \"\";\r\n    \r\n    // build top row with \"due date\" column\r\n    const container = document.createElement(\"div\");\r\n    container.classList.add(\"container\");\r\n    todoList.appendChild(container);\r\n  \r\n    const topRow = document.createElement(\"div\");\r\n    topRow.classList.add(\"row\");\r\n    container.appendChild(topRow);\r\n  \r\n    const col8 = document.createElement(\"div\");\r\n    col8.classList.add(\"col-8\");\r\n    topRow.appendChild(col8);\r\n  \r\n    const col4 = document.createElement(\"div\");\r\n    col4.classList.add(\"col-4\");\r\n    col4.classList.add(\"dueDateColumn\");\r\n    col4.innerHTML = \"Due Date\";\r\n    topRow.appendChild(col4);\r\n    // lopp through corresponding Todo todos and build a grid item for each one\r\n    for (let i = 0; i < activeProject.todos.length; i++) {\r\n      \r\n      const todoItem = document.createElement(\"div\");\r\n      todoItem.classList.add(\"row\", \"todo-item\");\r\n      container.appendChild(todoItem);\r\n  \r\n      const checkboxColumn = document.createElement(\"div\");\r\n      checkboxColumn.classList.add(\"col-1\", \"center\");\r\n      todoItem.appendChild(checkboxColumn);\r\n  \r\n      const checkboxImage = document.createElement(\"img\");\r\n      checkboxImage.classList.add(\"checkbox\");\r\n      checkboxImage.id = i;\r\n      if (activeProject.todos[i].completed) {\r\n        checkboxImage.src = \"images/checkbox.svg\";\r\n        checkboxImage.alt = \"checked\";\r\n        todoItem.style.opacity = 0.5;\r\n      } else {\r\n        checkboxImage.src = \"images/blank-check-box.svg\";\r\n        checkboxImage.alt = \"unchecked\";\r\n      }\r\n      checkboxImage.addEventListener(\"click\", function() {\r\n        if (activeProject.todos[i].completed) {\r\n          activeProject.todos[i].completed = false;\r\n        } else {\r\n          activeProject.todos[i].completed = true;\r\n        }\r\n        activeProject.displayTodos();\r\n      })\r\n      checkboxColumn.appendChild(checkboxImage);\r\n  \r\n      const todoTitle = document.createElement(\"div\");\r\n      todoTitle.classList.add(\"col-7\", \"col-text\");\r\n      todoTitle.innerHTML = activeProject.todos[i].title;\r\n      if (activeProject.todos[i].completed) {\r\n        todoTitle.style.textDecoration = \"line-through\";\r\n      }\r\n      todoTitle.addEventListener(\"click\", () => this.editTodo(i));\r\n      todoItem.appendChild(todoTitle);\r\n  \r\n      const todoDate = document.createElement(\"div\");\r\n      todoDate.classList.add(\"col-2\", \"col-text\");\r\n      todoDate.innerHTML = reformatDate(activeProject.todos[i].dueDate);\r\n      todoItem.appendChild(todoDate);\r\n  \r\n      const editColumn = document.createElement(\"div\");\r\n      editColumn.classList.add(\"col-1\", \"col-text\");\r\n      todoItem.appendChild(editColumn);\r\n  \r\n      const editBtn = document.createElement(\"img\");\r\n      editBtn.classList.add(\"edit\");\r\n      editBtn.src = \"images/edit.svg\";\r\n      editBtn.alt = \"edit\";\r\n      editBtn.id = i;\r\n      editBtn.addEventListener(\"click\", () => this.editTodo(i))\r\n      editColumn.appendChild(editBtn);\r\n  \r\n      const deleteColumn = document.createElement(\"div\");\r\n      deleteColumn.classList.add(\"col-1\");\r\n      todoItem.appendChild(deleteColumn);\r\n  \r\n      const deleteBtn = document.createElement(\"img\");\r\n      deleteBtn.classList.add(\"trash\");\r\n      deleteBtn.src = \"images/trash-can.svg\";\r\n      deleteBtn.alt = \"delete\";\r\n      deleteBtn.id = i;\r\n      deleteBtn.addEventListener(\"click\", (e) => deleteTodo(e));\r\n      deleteColumn.appendChild(deleteBtn);\r\n    }\r\n  }\r\n\r\n  editTodo(i) {\r\n      // generate a new edit modal, which contains the relevant info\r\n      const editTodoModal = document.createElement(\"div\");\r\n      editTodoModal.classList.add(\"modal\");\r\n      editTodoModal.style.display = \"block\";\r\n\r\n      const editTodoModalContent = document.createElement(\"editTodoModalContent\");\r\n      editTodoModalContent.classList.add(\"modal-content\");\r\n      editTodoModal.appendChild(editTodoModalContent);\r\n\r\n      const customFlex = document.createElement(\"div\");\r\n      customFlex.classList.add(\"custom-flex\");\r\n      editTodoModalContent.appendChild(customFlex);\r\n\r\n      const editTodoModalTitle = document.createElement(\"h2\");\r\n      editTodoModalTitle.innerHTML = \"Edit Todo\";\r\n      customFlex.appendChild(editTodoModalTitle);\r\n\r\n      const editTodoModalClose = document.createElement(\"span\");\r\n      editTodoModalClose.classList.add(\"close\");\r\n      editTodoModalClose.innerHTML = \"&times;\";\r\n      function closeEditModal() {\r\n        editTodoModal.style.display = \"none\";\r\n        console.log(\"fired\");\r\n      }\r\n      editTodoModalClose.addEventListener(\"click\", () => closeEditModal());\r\n      customFlex.appendChild(editTodoModalClose);\r\n\r\n      const form = document.createElement(\"form\");\r\n      editTodoModalContent.appendChild(form);\r\n\r\n      const titleLabel = document.createElement(\"label\");\r\n      titleLabel.setAttribute(\"for\", \"title\");\r\n      titleLabel.innerHTML = \"Task Name:\";\r\n      form.appendChild(titleLabel);\r\n\r\n      const br = document.createElement(\"br\");\r\n      form.appendChild(br);\r\n\r\n      const editTodoTitleInput = document.createElement(\"input\");\r\n      editTodoTitleInput.setAttribute(\"type\", \"text\");\r\n      editTodoTitleInput.id = \"editTodoTitle\";\r\n      editTodoTitleInput.setAttribute(\"name\", \"title\");\r\n      editTodoTitleInput.classList.add(\"todo-title\");\r\n      editTodoTitleInput.value = activeProject.todos[i].title;\r\n      form.appendChild(editTodoTitleInput);\r\n      form.appendChild(br);\r\n\r\n      const descriptionLabel = document.createElement(\"label\");\r\n      descriptionLabel.setAttribute(\"for\", \"description\");\r\n      descriptionLabel.innerHTML = \"Description:\";\r\n      form.appendChild(descriptionLabel);\r\n      form.appendChild(br);\r\n\r\n      const editDescriptionInput = document.createElement(\"textarea\");\r\n      editDescriptionInput.setAttribute(\"type\", \"text\");\r\n      editDescriptionInput.id = \"editTodoDescription\";\r\n      editDescriptionInput.setAttribute(\"name\", \"title\");\r\n      editDescriptionInput.setAttribute(\"rows\", \"4\");\r\n      editDescriptionInput.value = activeProject.todos[i].description;\r\n      form.appendChild(editDescriptionInput);\r\n      form.appendChild(br);\r\n\r\n      const dateLabel = document.createElement(\"label\");\r\n      dateLabel.setAttribute(\"for\", \"date\");\r\n      dateLabel.innerHTML = \"Date:\";\r\n      form.appendChild(dateLabel);\r\n\r\n      form.appendChild(br);\r\n\r\n      const editTodoDateInput = document.createElement(\"input\");\r\n      editTodoDateInput.setAttribute(\"type\", \"date\");\r\n      editTodoDateInput.id = \"editTodoDate\";\r\n      editTodoDateInput.setAttribute(\"name\", \"date\");\r\n      editTodoDateInput.classList.add(\"todoDateInput\");\r\n      editTodoDateInput.value = activeProject.todos[i].dueDate;\r\n      form.appendChild(editTodoDateInput);\r\n      form.appendChild(br);\r\n      \r\n      const editTodoSaveButton = document.createElement(\"button\");\r\n      editTodoSaveButton.setAttribute(\"type\", \"button\");\r\n      editTodoSaveButton.id = \"editTodoSave\";\r\n      editTodoSaveButton.classList.add(\"rounded\");\r\n      editTodoSaveButton.innerHTML = \"Save\";\r\n      editTodoSaveButton.addEventListener(\"click\", function() {\r\n        if (editTodoTitleInput.value === \"\") {\r\n            alertNoTitleInput(editTodoTitleInput);\r\n        } else {\r\n        activeProject.todos[i].title = editTodoTitleInput.value;\r\n        activeProject.todos[i].description = editDescriptionInput.value;\r\n        activeProject.todos[i].dueDate = editTodoDateInput.value;\r\n        closeEditModal()\r\n        activeProject.displayTodos();\r\n        }\r\n      })\r\n      form.appendChild(editTodoSaveButton);\r\n\r\n      const modalAppend = document.getElementById(\"modalAppend\");\r\n      modalAppend.appendChild(editTodoModal);\r\n      updateLocalStorage();\r\n\r\n      // When the user clicks anywhere outside of the modal, close it\r\n      window.addEventListener(\"click\", function(event) {\r\n        if (event.target == editTodoModal) {\r\n        editTodoModal.style.display = \"none\";\r\n        }\r\n      });\r\n    } // ---- / editTodo function ----- //\r\n  }\r\n\r\n  function reviveJSON() {\r\n    for (let i = 0; i < projects.length; i++) {\r\n      projects[i] = new Project(projects[i].title, projects[i].todos)\r\n    }\r\n    return projects;\r\n  }\r\n\r\n// ------ INITIAL SETUP OF DEFAULTS ------ //\r\nconst projectsList = document.getElementById(\"projects-list\");\r\n\r\nlet projects = [];\r\n\r\nlet activeProject = \"\";\r\n\r\n// retrieve projects from local storage on startup\r\nfunction retrieveProjects() {\r\n  if (localStorage.projects) {\r\n    projects = JSON.parse(localStorage.projects);\r\n    projects = reviveJSON();\r\n    displayProjects();\r\n    if (projects[0]) {\r\n      activeProject = projects[0];\r\n      activeProject.displayTodos();\r\n    } else {\r\n      toggleAddTodoBtn();\r\n    }\r\n  } else {\r\n    const defaultProject = new Project(\"Default Project\");\r\n    activeProject = defaultProject;\r\n    const defaultTodo = new Todo(\"Eat chicken\", defaultProject.title, \"go back\", \"11/02/1993\");\r\n    defaultTodo.addTodoToProject();\r\n    defaultProject.addProjectToList();\r\n    defaultProject.displayTodos();\r\n  }\r\n}\r\n\r\nretrieveProjects();\r\n\r\n\r\n// update local storage when a change is made\r\nfunction updateLocalStorage() {\r\n  localStorage.setItem(\"projects\", JSON.stringify(projects));\r\n}\r\n  \r\n// ------ ADD PROJECT MODAL ------ //\r\n    // Get the modal\r\nconst projectsModal = document.getElementById(\"projectsModal\");\r\n\r\n// Get the button that opens the modal\r\nconst projectBtn = document.getElementById(\"add-project\");\r\n\r\n// Get the <span> element that closes the modal\r\nconst projectClose = document.getElementById(\"projectModalClose\");\r\n\r\n// When the user clicks on the button, open the modal\r\nprojectBtn.addEventListener(\"click\", function() {  \r\n  projectsModal.style.display = \"block\";});\r\n\r\n// When the user clicks on <span> (x), close the modal\r\nprojectClose.onclick = function() {\r\n  projectsModal.style.display = \"none\";\r\n}\r\n\r\n// When the user clicks anywhere outside of the modal, close it\r\nwindow.addEventListener(\"click\", function(event) {\r\n  if (event.target == projectsModal) {\r\n    projectsModal.style.display = \"none\";\r\n  }\r\n});\r\n\r\n// Get the user input for project title\r\nconst projectTitle = document.getElementById(\"projectTitle\");\r\n\r\nfunction createNewProject(name) {\r\n  if (projectTitle.value === \"\") {\r\n    alertNoTitleInput(projectTitle);\r\n  } else {\r\n  const newProject = new Project(name);\r\n    // TEMPORARY TEST TODOS ADDED\r\n    newProject.todos.push(new Todo(\"log in\", \"Work\", \"log on to PC\", \"2021-02-02\"))\r\n    newProject.todos.push(new Todo(\"rama\", \"krishna\", \"log on to PC\", \"2021-02-02\"))\r\n    newProject.addProjectToList();\r\n    newProject.displayTodos();\r\n    closeProjectsModal();\r\n    toggleAddTodoBtn();\r\n  }\r\n}\r\n\r\n// When user clicks save, add project to projects list\r\nconst projectSaveBtn = document.getElementById(\"projectSave\");\r\nprojectSaveBtn.addEventListener(\"click\", () => createNewProject(projectTitle.value));\r\n\r\nfunction closeProjectsModal() {\r\n  projectsModal.style.display = \"none\";\r\n}\r\n\r\n// -------- END ADD PROJECTS MODAL ------- //\r\n\r\n// DISPLAY THE PROJECTS\r\nfunction displayProjects() {\r\n  projectsList.innerHTML = \"\";\r\n  for (let i = 0; i < projects.length; i++) {\r\n    console.log(projects);\r\n    console.log(projects[i]);\r\n    const newProjectDiv = document.createElement(\"div\");\r\n    const newProjectTitle = document.createElement(\"h4\");\r\n    newProjectTitle.classList.add(\"projectTitle\")\r\n    newProjectTitle.id = i;\r\n    newProjectTitle.innerHTML = projects[i].title;\r\n    newProjectDiv.appendChild(newProjectTitle);\r\n    const projectDeleteBtn = document.createElement(\"img\");\r\n    projectDeleteBtn.src = \"images/trash-can.svg\";\r\n    projectDeleteBtn.classList.add(\"trash\");\r\n    projectDeleteBtn.classList.add(\"hoverAppear\");\r\n    projectDeleteBtn.style.opacity = 0;\r\n    \r\n    projectDeleteBtn.addEventListener(\"click\", () => deleteProject(i));\r\n    newProjectDiv.classList.add(\"project-flex\");\r\n    newProjectDiv.addEventListener(\"mouseover\", function() {\r\n      projectDeleteBtn.style.opacity = 0.5});\r\n    newProjectDiv.addEventListener(\"mouseout\", function() {\r\n      projectDeleteBtn.style.opacity = 0;\r\n    });\r\n    newProjectDiv.appendChild(projectDeleteBtn);\r\n    \r\n    newProjectTitle.addEventListener(\"click\", () => projects[i].displayTodos());\r\n    projectsList.appendChild(newProjectDiv);\r\n  }\r\n  updateLocalStorage();\r\n}\r\n\r\nfunction deleteProject(i) {\r\n  // remove the selected project\r\n  projects.splice(i, 1);\r\n  // 3 possible scenarios on deletion - skip to project before, skip to one after, display blank if no projects left\r\n  if (projects[i-1]) {\r\n    activeProject = projects[i - 1];\r\n    activeProject.displayTodos();\r\n  } else if (projects[i]) {\r\n    activeProject = projects[i];\r\n    activeProject.displayTodos();\r\n  } else {\r\n    activeProject = \"\";\r\n    const todoList = document.getElementById(\"todo-list\");\r\n    todoList.innerHTML = \"\";\r\n    const projectTitleDisplay = document.getElementById(\"project-title\");\r\n    projectTitleDisplay.innerHTML = \"Todos\";    \r\n  }\r\n  // remove the option to add todos if there are no projects\r\n  toggleAddTodoBtn();\r\n  // display the projects (or lackthereof)\r\n  displayProjects();\r\n}\r\n\r\n\r\nfunction deleteTodo(e) {\r\nactiveProject.todos.splice(e.target.id, 1);\r\nactiveProject.displayTodos();\r\nupdateLocalStorage();\r\n}\r\n\r\n\r\nfunction toggleAddTodoBtn() {\r\n  const addTodoButton = document.getElementById(\"add-todo\");\r\n  if (projects.length === 0) {\r\n  addTodoButton.style.display = \"none\";\r\n  } else {\r\n  addTodoButton.style.display = \"block\";\r\n  }\r\n}\r\n\r\n\r\n// ------ EDIT TODO MODAL ------ //\r\n    // Get the modal\r\n    const editTodoModal = document.getElementById(\"editTodoModal\");\r\n    \r\n    // Get the <span> element that closes the modal\r\n    const editTodoModalClose = document.getElementById(\"editTodoModalClose\");\r\n\r\n    function openEditModal() {\r\n      editTodoModal.style.display = \"block\";\r\n    }\r\n    \r\n    // When the user clicks on <span> (x), close the modal\r\n    function closeEditModal() {\r\n      editTodoModal.style.display = \"none\";\r\n      console.log(\"fired\");\r\n    }\r\n    editTodoModalClose.onclick = () => closeEditModal();\r\n    \r\n    // When the user clicks anywhere outside of the modal, close it\r\n    window.addEventListener(\"click\", function(event) {\r\n      if (event.target == editTodoModal) {\r\n        editTodoModal.style.display = \"none\";\r\n      }\r\n    });\r\n\r\n\r\n\r\n// when I push the new project button, \r\n  // a new project object should be created with desired name, \r\n  // the new project object should be pushed to the projects array,\r\n  // the new project should be listed on the left hand menu\r\n  // the right hand menu should change to a new \"tab\"\r\n  // the tab should list all the todos saved in that project\r\n\r\n// when I click on a project name\r\n  // all other projects' active property should be set to \"false\"\r\n  // the project's active status should be changed to \"true\"\r\n  // the right hand menu should change to a new \"tab\"\r\n  // that tab should display all of the todos stored in the active project's todos list.\r\n\r\n// when I click on the Add Todo button within a project\r\n  // a modal window should pop up\r\n  // within that modal window I should be able to add the name, dueDate, notes relating to a Todo\r\n  // there should be a save button and a close button\r\n  // when I click save, the todo should be stored in the relevant array and displayed to the page\r\n  // if I fail to add a title before clicking save, I should be alerted that I cannot save before adding one.\r\n\r\n\r\n// first write a function that simply logs the input values when you press save\r\n// think bootstrap is fucking with this process and clearing the console.\r\n// may need to change class names to get away from bootstrap??\r\n\r\n\r\n\r\n// CREATE A NEW TODO FROM USER INPUT AND REDISPLAY ALL TODOS\r\nfunction createTodo() {\r\n  // get user input value boxes\r\n  let todoTitle = document.getElementById(\"addTodoTitle\");\r\n  let todoDesc = document.getElementById(\"addTodoDescription\");\r\n  let todoDate = document.getElementById(\"addTodoDate\");\r\n  // create new todo with user input\r\n  // todoDate.value = format(new Date(2021, 01, 31), 'dd/MM/yyy');\r\n  if (todoTitle.value === \"\") {\r\n    alertNoTitleInput(todoTitle);\r\n  } else {\r\n  const newTodo = new Todo (todoTitle.value, activeProject.title, todoDesc.value, todoDate.value);\r\n  console.log(newTodo);\r\n  // save new todo into the active project\r\n  newTodo.addTodoToProject();\r\n  activeProject.displayTodos();\r\n  closeTodoModal();\r\n  updateLocalStorage();\r\n  }\r\n}\r\n\r\nfunction alertNoTitleInput(input) {\r\n  input.placeholder = \"You must enter a title.\";\r\n}\r\n\r\n\r\n// ----- THE ADD TODO MODAL ----- //\r\n  // Get the modal\r\nvar todoModal = document.getElementById(\"addTodoModal\");\r\n\r\n// Get the button that opens the modal\r\nvar btn = document.getElementById(\"add-todo\");\r\n\r\n// Get the <span> element that closes the modal\r\nvar span = document.getElementById(\"modalClose\");\r\n\r\n// When the user clicks on the button, open the modal\r\nfunction openTodoModal() {\r\n  todoModal.style.display = \"block\";\r\n  // set default date input to today\r\n  getTodaysDate();\r\n}\r\nbtn.onclick = () => openTodoModal();\r\n\r\n// When the user clicks on <span> (x), close the modal\r\nspan.onclick = () => closeTodoModal();\r\n\r\nfunction closeTodoModal() {\r\n  todoModal.style.display = \"none\";\r\n}\r\n\r\n// When the user clicks anywhere outside of the modal, close it\r\nwindow.addEventListener(\"click\", function(event) {\r\n  if (event.target == todoModal) {\r\n    todoModal.style.display = \"none\";\r\n  }\r\n});\r\n\r\n// get todo save button\r\nconst todoSaveBtn = document.getElementById(\"addTodoSave\");\r\n// create new todo from user input when button clicked\r\ntodoSaveBtn.addEventListener(\"click\", () => createTodo());\r\n\r\n\n\n//# sourceURL=webpack://todo-list/./src/index.js?");
/******/ })()
;